/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.devopsnextgenx.microservices.modules.api;

import java.util.UUID;
import io.devopsnextgenx.microservices.modules.model.User;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-12-14T23:08:02.174052927-05:00[America/Detroit]", comments = "Generator version: 7.10.0")
@Validated
@Tag(name = "User", description = "the User API")
public interface UserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /user/{id} : Delete User By Id
     *
     * @param id Unique Id of an User (required)
     * @return OK (status code 201)
     */
    @Operation(
        operationId = "deleteUserById",
        summary = "Delete User By Id",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "201", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/user/{id}"
    )
    
    default ResponseEntity<Void> _deleteUserById(
        @Parameter(name = "id", description = "Unique Id of an User", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    ) {
        return deleteUserById(id);
    }

    // Override this method
    default  ResponseEntity<Void> deleteUserById(UUID id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{id} : Get User By Id
     *
     * @param id Unique Id of an User (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getUserById",
        summary = "Get User By Id",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<User> _getUserById(
        @Parameter(name = "id", description = "Unique Id of an User", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    ) {
        return getUserById(id);
    }

    // Override this method
    default  ResponseEntity<User> getUserById(UUID id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /user : Save User
     *
     * @param user  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "saveUser",
        summary = "Save User",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<User> _saveUser(
        @Parameter(name = "User", description = "") @Valid @RequestBody(required = false) User user
    ) {
        return saveUser(user);
    }

    // Override this method
    default  ResponseEntity<User> saveUser(User user) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
