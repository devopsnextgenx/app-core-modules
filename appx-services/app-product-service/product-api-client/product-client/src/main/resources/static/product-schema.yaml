openapi: 3.0.0

info:
  title: Product API
  description: Product Apis for Appx.
  version: 0.0.1
  contact:
    name: Amit Kshirsagar

servers:
  - url: 'http://product-service.{environment}.localtest.me/api'
    variables:
      environment:
        default: api.local    # Local server
        enum:
          - api               # Production server
          - api.dev           # Development server
          - api.local         # local server
          - api.staging       # Staging server
tags:
  - name: ProductService
    description: Product Service

security:
  - JwtAuthKey: []

paths:
  /products:
    get:
      operationId: listProducts
      tags:
        - ProductService
      description: Returns the List of Products
      responses:
        200:
          $ref: '#/components/responses/Products'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    post:
      operationId: postProduct
      tags:
        - ProductService
      description: Add a new Product
      requestBody:
        $ref: '#/components/requestBodies/Product'
      responses:
        201:
          $ref: '#/components/responses/Product'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /products/{id}:
    get:
      operationId: getProductById
      tags:
        - ProductService
      description: Return the Product by Id
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          $ref: '#/components/responses/Product'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      operationId: putProductById
      tags:
        - ProductService
      description: Replace the Product by Id
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        $ref: '#/components/requestBodies/Product'
      responses:
        200:
          $ref: '#/components/responses/Product'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      operationId: deleteProductById
      tags:
        - ProductService
      description: Delete Product by Id
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Successful response with no content
          content:
            application/json: {}
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    patch:
      operationId: patchProductById
      tags:
        - ProductService
      description: Update Product by Id
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        $ref: '#/components/requestBodies/Product'
      responses:
        200:
          $ref: '#/components/responses/Product'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    JwtAuthKey:
      type: apiKey
      in: header
      name: JWT

  parameters:
    id:
      in: path
      name: id
      required: true
      schema:
        type: string
      description: id for the item to be fetched

  requestBodies:
    Product:
      description: Product RequestBody
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'

  responses:
    404NotFound:       # Can be referenced as '#/components/responses/404NotFound'
      description: The specified resource was not found.
    BadRequest:
      description: BAD_REQUEST
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppxError'
    Unauthorized:
      description: UNAUTHORIZED
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppxError'
    Forbidden:
      description: FORBIDDEN
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppxError'
    InternalServerError:
      description: INTERNAL_SERVER_ERROR
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppxError'
    ImageResponse:     # Can be referenced as '#/components/responses/ImageResponse'
      description: An image.
      content:
        image/*:
          schema:
            type: string
            format: binary
    GenericError:      # Can be referenced as '#/components/responses/GenericError'
      description: An error occurred.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppxError'

    Products:
      description: SUCCESS
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Product'

    Product:
      description: SUCCESS
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'

  schemas:
    AppxError:
      type: object
      properties:
        error:
          type: string
        status:
          type: string
        correlation-id:
          type: string

    Base:
      allOf:
        - $ref: '#/components/schemas/AppxError'
        - type: object
          properties:
            id:
              type: string
              example: 1xxnss2
            deleted:
              type: boolean
            created:
              type: string
            updated:
              type: string

    Product:
      allOf:
        - $ref: '#/components/schemas/Base'
        - type: object
          required:
            - name
            - price
          properties:
            name:
              type: string
            description:
              type: string
            price:
              type: number
            imgLogo:
              type: string
            imgs:
              type: array
              items:
                type: string
            tags:
              type: array
              items:
                type: string
